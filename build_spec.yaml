version: 0.1
component: build
timeoutInSeconds: 10000
shell: bash
failImmediatelyOnError: true
env:
  vaultVariables:
    # Ensure that this vault secret contains a single-line base64-encoded private key.
    SOPS_PGP_KEY: "ocid1.vaultsecret.oc1.iad.amaaaaaarhu4k2aalfuxr577tgsphedqodulqamf7lkrmtf7scclr6g2xa7a"
steps:
  - type: Command
    name: "Install Dependencies"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      # (Optional) Log a snippet of the SOPS key for tracking purposes.
      echo "SOPS key prefix: $(echo "$SOPS_PGP_KEY" | head -c 10)"
      
      # Install utilities, including yum-utils, tmux, gnupg, and unzip
      yum install -y yum-utils tmux gnupg unzip
      
      # Instead of using the failing HashiCorp repository, download Packer manually
      # (Replace 1.7.10 with your desired Packer version)
      curl -Lo packer.zip https://releases.hashicorp.com/packer/1.7.10/packer_1.7.10_linux_amd64.zip
      unzip packer.zip -d /usr/local/bin/
      chmod +x /usr/local/bin/packer
      rm -f packer.zip

      # Download and install SOPS
      curl -Lo /usr/local/bin/sops https://github.com/mozilla/sops/releases/download/v3.9.4/sops-v3.9.4.linux.amd64
      chmod +x /usr/local/bin/sops

  - type: Command
    name: "Setup Python Environment"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      # Install Python 3.6 (available on Oracle Linux 7)
      yum install -y python36
      # Upgrade pip and setuptools using Python 3.6
      python3.6 -m pip install --upgrade pip setuptools
      # Create and activate a virtual environment
      python3.6 -m venv packer_env
      source packer_env/bin/activate
      python -m pip install --upgrade pip
      # Install ansible-core (using version 2.11.12, an available version)
      pip install ansible-core==2.11.12

  - type: Command
    name: "Install Ansible Galaxy Roles"
    shell: bash
    timeoutInSeconds: 300
    failImmediatelyOnError: true
    command: |
      # Activate the virtual environment so that ansible-galaxy is available
      source packer_env/bin/activate && ansible-galaxy install -r ./requirements.yml

  - type: Command
    name: "Decrypt Defaults File"
    shell: bash
    timeoutInSeconds: 300
    failImmediatelyOnError: true
    command: |
      # Create and use a temporary GNUPGHOME to avoid issues with /root/.gnupg
      mkdir -p /tmp/gnupg && export GNUPGHOME=/tmp/gnupg
      # Unset GPG_AGENT_INFO so gpg doesn't try to contact a non-existent gpg-agent
      export GPG_AGENT_INFO=""
      # Import the SOPS PGP private key (decoded from base64) in batch mode without TTY interaction
      echo "$SOPS_PGP_KEY" | base64 --decode | gpg --batch --no-tty --import
      # Decrypt the encrypted defaults file to produce defaults.pkr.hcl
      sops --decrypt defaults.pkr.hcl.enc > defaults.pkr.hcl

  - type: Command
    name: "Build Custom Image"
    shell: bash
    timeoutInSeconds: 3600
    failImmediatelyOnError: true
    command: |
      # Extract build_config_path from the decrypted defaults file
      build_config_path=$(grep '^build_config_path' defaults.pkr.hcl | cut -d '=' -f2 | tr -d ' "')
      echo "Using build_config_path: ${build_config_path}"
      # Run packer init and build using the extracted build_config_path in a tmux session
      tmux new -d -s packer_session "packer init ${build_config_path} && packer build -var-file='defaults.pkr.hcl' ${build_config_path}"
      tmux attach-session -t packer_session

  - type: Command
    name: "Cleanup Decrypted File"
    shell: bash
    timeoutInSeconds: 60
    failImmediatelyOnError: false
    command: |
      # Remove the decrypted configuration file to secure sensitive data
      rm -f defaults.pkr.hcl
