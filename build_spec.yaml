version: 0.1
component: build
timeoutInSeconds: 10000
shell: bash
failImmediatelyOnError: true
env:
  vaultVariables:
    # Ensure that this vault secret contains a single-line base64-encoded private key.
    SOPS_PGP_KEY: "ocid1.vaultsecret.oc1.iad.amaaaaaarhu4k2aalfuxr577tgsphedqodulqamf7lkrmtf7scclr6g2xa7a"
    # OCI_API_KEY: "ocid1.vaultsecret.oc1.iad.amaaaaaarhu4k2aanjmtqyih64tk7u3icwqjdqhf7i54v46vfu6oupnw6exq"
steps:
  - type: Command
    name: "Install Dependencies"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |  
      # Install utilities, including yum-utils, gnupg, and unzip
      yum install -y yum-utils gnupg unzip
      
      # Download Packer version 1.12.0 (which supports plugins)
      curl -Lo packer.zip https://releases.hashicorp.com/packer/1.12.0/packer_1.12.0_linux_amd64.zip
      unzip packer.zip -d /usr/local/bin/
      chmod +x /usr/local/bin/packer
      rm -f packer.zip

      # Download and install SOPS
      curl -Lo /usr/local/bin/sops https://github.com/mozilla/sops/releases/download/v3.9.4/sops-v3.9.4.linux.amd64
      chmod +x /usr/local/bin/sops

  - type: Command
    name: "Setup Python Environment"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      # Install Python 3.6 (available on Oracle Linux 7)
      yum install -y python36
      # Upgrade pip and setuptools using Python 3.6
      python3.6 -m pip install --upgrade pip setuptools
      # Create and activate a virtual environment
      python3.6 -m venv packer_env
      source packer_env/bin/activate
      python -m pip install --upgrade pip
      # Install ansible-core (using version 2.11.12, an available version)
      pip install ansible-core==2.11.12

  - type: Command
    name: "Install Ansible Galaxy Roles"
    shell: bash
    timeoutInSeconds: 300
    failImmediatelyOnError: true
    command: |
      # Activate the virtual environment so that ansible-galaxy is available
      source packer_env/bin/activate && ansible-galaxy install -r ./requirements.yml

  # - type: Command
  #   name: "Configure OCI CLI and API Keys"
  #   shell: bash
  #   timeoutInSeconds: 300
  #   failImmediatelyOnError: true
  #   command: |
  #     # Create the .oci directory if it doesn't exist
  #     mkdir -p ~/.oci
  #     # Generate a new private key for OCI API access
  #     openssl genrsa -out ~/.oci/oci_api_key.pem 2048
  #     # Secure the private key file
  #     chmod go-rwx ~/.oci/oci_api_key.pem
  #     # Generate the corresponding public key
  #     openssl rsa -pubout -in ~/.oci/oci_api_key.pem -out ~/.oci/oci_api_key_public.pem
  #     echo "Public Key (please add this to your OCI profile under User Settings > API Keys):"
  #     cat ~/.oci/oci_api_key_public.pem

  # - type: Command
  #   name: "Create OCI API Key & Config File"
  #   shell: bash
  #   timeoutInSeconds: 120
  #   failImmediatelyOnError: true
  #   command: |
  #     # Always create the .oci directory
  #     mkdir -p ~/.oci
  #     # Write the OCI_API_KEY directly into the key file
  #     echo "$OCI_API_KEY" | base64 --decode > ~/.oci/oci_api_key.pem
  #     chmod go-rwx ~/.oci/oci_api_key.pem
      
  #     # Create (or overwrite) the OCI config file with your credentials.
  #     cat <<EOF > ~/.oci/config
  #     [DEFAULT]
  #     user=ocid1.user.oc1..aaaaaaaackyljpy2qvn62nducehazjk32yvgltqwqq2nj7rpsqcwkv2676lq
  #     fingerprint=6c:a1:86:9c:73:5b:79:69:53:e9:d5:7a:f4:9c:41:32
  #     tenancy=ocid1.tenancy.oc1..aaaaaaaas55dgjyal3pqaptlaf2xgeu4gwkpzdhs273ftybtm2klutca3j3a
  #     region=us-ashburn-1
  #     key_file=~/.oci/oci_api_key.pem
  #     EOF

  #     chmod go-rwx ~/.oci/config

  #     echo "Updated .oci directory contents:"
  #     ls -l ~/.oci
  #     cat ~/.oci/oci_api_key.pem
  #     echo "Config contents:"
  #     cat ~/.oci/config

  - type: Command
    name: "Decrypt Defaults File"
    shell: bash
    timeoutInSeconds: 300
    failImmediatelyOnError: true
    command: |
      # (Optional) Log a snippet of the SOPS key for tracking purposes.
      echo "Logging full SOPS key: $SOPS_PGP_KEY"
      # Decode the base64-encoded SOPS PGP private key and import it into GPG
      echo "$SOPS_PGP_KEY" | base64 --decode | gpg --import
      # Decrypt the encrypted defaults file to produce defaults.pkr.hcl
      sops --decrypt defaults.pkr.hcl.enc > defaults.pkr.hcl

  - type: Command
    name: "Install Custom OCI Plugin"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      # Activate the virtual environment so that any required executables (e.g., ansible-playbook) are in PATH
      source packer_env/bin/activate
      # This step installs the custom OCI plugin binary that has been pushed to the repository.
      packer plugins install --path ./packer-plugin-oracle github.com/hashicorp/oracle

  - type: Command
    name: "Build Custom Image"
    shell: bash
    timeoutInSeconds: 3600
    failImmediatelyOnError: true
    command: |
      # Extract build_config_path from the decrypted defaults file
      build_config_path=$(grep '^build_config_path' defaults.pkr.hcl | cut -d '=' -f2 | tr -d ' "')
      echo "Using build_config_path: ${build_config_path}"
      # Activate the virtual environment so that any required executables (e.g., ansible-playbook) are in PATH
      source packer_env/bin/activate
      # Run packer init and build using the extracted build_config_path directly
      packer init "${build_config_path}" && packer build -var-file='defaults.pkr.hcl' "${build_config_path}"

  - type: Command
    name: "Cleanup Decrypted File"
    shell: bash
    timeoutInSeconds: 60
    failImmediatelyOnError: false
    command: |
      # Remove the decrypted configuration file to secure sensitive data
      rm -f defaults.pkr.hcl
